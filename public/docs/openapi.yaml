openapi: 3.0.3
info:
    title: 'The Censorship API API'
    description: 'I love this API!!'
    version: 1.0.0
servers:
    -
        url: 'http://localhost:8000'
paths:
    /api/services/highlightBadWordsInText:
        post:
            summary: 'Highlight bad words in texts.'
            description: 'This endpoint will highlight any bad words in the provided texts, surrounding them with `<em></em>` HTML tags.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/x-www-form-urlencoded
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    highlighted: 'He <em>loves</em> his <em>family</em> sooo much!'
                                properties:
                                    highlighted: { type: string, example: 'He <em>loves</em> his <em>family</em> sooo much!' }
            tags:
                - Services
            requestBody:
                required: false
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            type: object
                            properties:
                                texts:
                                    type: array
                                    description: 'Texts to be highlighted.'
                                    example: ['He loves his family sooo much', 'But they don''t fucking love him back.']
                                    items: { type: string }
                                things:
                                    type: array
                                    description: 'Things to be done.'
                                    example: [[], []]
                                    items: { type: object, properties: { name: { type: string, description: Thing., example: sed } }, required: [name] }
    '/api/services/censorTexts/{mode}':
        post:
            summary: 'Censor bad words in texts.'
            description: 'This endpoint will censor any bad words in a list of texts.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                example:
                                    - 'He l===s his f====y sooo much'
                                    - 'But they don''t fucking l===e him back.'
            tags:
                - Services
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                texts:
                                    type: array
                                    description: 'Text to be censored.'
                                    example: 'He loves his family sooo much'
                                    items: { type: string }
                                items:
                                    type: object
                                    description: 'An it'
                                    example: []
                                    properties: { inttt: { type: integer, description: 'Other it', example: 5 } }
                                things:
                                    type: array
                                    description: 'Things to be done.'
                                    example: [[], []]
                                    items: { type: object, properties: { name: { type: string, description: Thing., example: laborum } }, required: [name] }
        parameters:
            -
                in: path
                name: mode
                description: "Optional parameter. Censorship mode. `full` will replace the entire word with `=====`,\n`partial` will replace all characters but the first and last. Defaults to `partial`."
                required: true
                schema:
                    type: string
                examples:
                    omitted:
                        summary: 'When the value is omitted'
                        value: ''
                    present:
                        summary: 'When the value is present'
                        value: et
    /api/services/censorImage:
        post:
            summary: 'Censor bad words in an image.'
            description: 'This endpoint will censor any bad words in the provided image and return the censored image. All bad words will be replaced by ======.'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: 'The censored image'
                    content:
                        application/octet-stream:
                            schema:
                                type: string
                                format: binary
                400:
                    description: '400, When the image''s words are too powerfulüò¢'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Operation failed'
                                    reason: 'The words are too touching.üò≠'
                                properties:
                                    message: { type: string, example: 'Operation failed' }
                                    reason: { type: string, example: 'The words are too touching.üò≠' }
            tags:
                - Services
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: string
                                    format: binary
                                    description: 'The image containing text to be censored.'
                            required:
                                - image
    /api/services/getTopBadWords:
        get:
            summary: 'Get the most frequently used bad words.'
            description: 'PS: This response was generated using the `@apiResource` and `@apiResourceModel` tag. üòè'
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {YOUR_AUTH_KEY}'
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ word: voluptas, how_bad_is_it: horrible }, { word: est, how_bad_is_it: unspeakable }]
                                    links: { first: '/?page=1', last: null, prev: null, next: null }
                                    meta: { current_page: 1, from: 1, path: /, per_page: '5', to: 2 }
                                properties:
                                    data: { type: array, example: [{ word: voluptas, how_bad_is_it: horrible }, { word: est, how_bad_is_it: unspeakable }], items: { type: object } }
                                    links: { type: object, example: { first: '/?page=1', last: null, prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, path: /, per_page: '5', to: 2 } }
            tags:
                - Services
components:
    securitySchemes:
        default:
            type: http
            scheme: bearer
            description: ''
security:
    -
        default: []
